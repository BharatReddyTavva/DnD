//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DnD.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DNDEntities : DbContext
    {
        public DNDEntities()
            : base("name=DNDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroups { get; set; }
        public virtual DbSet<CustomerGroupMaster> CustomerGroupMasters { get; set; }
        public virtual DbSet<DealnDonePlan> DealnDonePlans { get; set; }
        public virtual DbSet<DisplayPrice> DisplayPrices { get; set; }
        public virtual DbSet<DNDUser> DNDUsers { get; set; }
        public virtual DbSet<LabelPrinterFormat> LabelPrinterFormats { get; set; }
        public virtual DbSet<PricingTier> PricingTiers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductBrand> ProductBrands { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<ProductInventoryAndTax> ProductInventoryAndTaxes { get; set; }
        public virtual DbSet<ProductSupplier> ProductSuppliers { get; set; }
        public virtual DbSet<ProductTag> ProductTags { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<ProductVariantAttribute> ProductVariantAttributes { get; set; }
        public virtual DbSet<PurchaseStockOrder> PurchaseStockOrders { get; set; }
        public virtual DbSet<RegisterOpenCloseStatusType> RegisterOpenCloseStatusTypes { get; set; }
        public virtual DbSet<ReturnStockOrder> ReturnStockOrders { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleManagement> RoleManagements { get; set; }
        public virtual DbSet<SalesTax> SalesTaxes { get; set; }
        public virtual DbSet<SellOpenCloseRegister> SellOpenCloseRegisters { get; set; }
        public virtual DbSet<SetupAccount> SetupAccounts { get; set; }
        public virtual DbSet<SetupAccountClearOutData> SetupAccountClearOutDatas { get; set; }
        public virtual DbSet<SetupContactInformation> SetupContactInformations { get; set; }
        public virtual DbSet<SetupGeneralStoreSetting> SetupGeneralStoreSettings { get; set; }
        public virtual DbSet<SetupLoyaltyPointsId> SetupLoyaltyPointsIds { get; set; }
        public virtual DbSet<SetupPaymentType> SetupPaymentTypes { get; set; }
        public virtual DbSet<SetupRegistersAskForNote> SetupRegistersAskForNotes { get; set; }
        public virtual DbSet<SetupRegistersCashManagement> SetupRegistersCashManagements { get; set; }
        public virtual DbSet<SetupRegistersReceiptTemplate> SetupRegistersReceiptTemplates { get; set; }
        public virtual DbSet<SetupSalesTaxGroupId> SetupSalesTaxGroupIds { get; set; }
        public virtual DbSet<SetupSalesTaxGroupMaster> SetupSalesTaxGroupMasters { get; set; }
        public virtual DbSet<SetupStoreAddress> SetupStoreAddresses { get; set; }
        public virtual DbSet<SKUGenerationType> SKUGenerationTypes { get; set; }
        public virtual DbSet<StockOrderType> StockOrderTypes { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<StoreOutlet> StoreOutlets { get; set; }
        public virtual DbSet<StoreOutletRegister> StoreOutletRegisters { get; set; }
        public virtual DbSet<StoreUser> StoreUsers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<TransferStockOrder> TransferStockOrders { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserSwitchingSecurityType> UserSwitchingSecurityTypes { get; set; }
        public virtual DbSet<ProductPricing> ProductPricings { get; set; }
        public virtual DbSet<ProductVariant> ProductVariants { get; set; }
        public virtual DbSet<ProductOutletPricing> ProductOutletPricings { get; set; }
        public virtual DbSet<ProductInventory> ProductInventories { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DeleteBrand(Nullable<int> productBrandId, Nullable<int> updatedBy)
        {
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeleteBrand", productBrandIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DeleteProductType(Nullable<int> productTypeId, Nullable<int> updatedBy)
        {
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeleteProductType", productTypeIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DeleteSupplier(Nullable<int> productSupplierId, Nullable<int> updatedBy)
        {
            var productSupplierIdParameter = productSupplierId.HasValue ?
                new ObjectParameter("ProductSupplierId", productSupplierId) :
                new ObjectParameter("ProductSupplierId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeleteSupplier", productSupplierIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_DeleteTag(Nullable<int> productTagId, Nullable<int> updatedBy)
        {
            var productTagIdParameter = productTagId.HasValue ?
                new ObjectParameter("ProductTagId", productTagId) :
                new ObjectParameter("ProductTagId", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeleteTag", productTagIdParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<usp_GetAllBrandsByStore_Result> usp_GetAllBrandsByStore(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllBrandsByStore_Result>("usp_GetAllBrandsByStore", storeIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllMasterDataForCreateOrEditProduct_Result> usp_GetAllMasterDataForCreateOrEditProduct(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllMasterDataForCreateOrEditProduct_Result>("usp_GetAllMasterDataForCreateOrEditProduct", storeIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllProductTypesByStore_Result> usp_GetAllProductTypesByStore(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllProductTypesByStore_Result>("usp_GetAllProductTypesByStore", storeIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllSuppliersByStore_Result> usp_GetAllSuppliersByStore(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllSuppliersByStore_Result>("usp_GetAllSuppliersByStore", storeIdParameter);
        }
    
        public virtual ObjectResult<usp_GetAllTagsByStore_Result> usp_GetAllTagsByStore(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTagsByStore_Result>("usp_GetAllTagsByStore", storeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_InsertBrand(string brandName, string brandDescription, Nullable<int> createdBy)
        {
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandDescriptionParameter = brandDescription != null ?
                new ObjectParameter("BrandDescription", brandDescription) :
                new ObjectParameter("BrandDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertBrand", brandNameParameter, brandDescriptionParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_InsertProductType(string productTypeName, Nullable<int> createdBy)
        {
            var productTypeNameParameter = productTypeName != null ?
                new ObjectParameter("ProductTypeName", productTypeName) :
                new ObjectParameter("ProductTypeName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertProductType", productTypeNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_InsertSupplier(string supplierName, Nullable<decimal> supplierDefaultMarkup, string description, string firstname, string lastname, string company, string email, string phone, string mobile, string fax, string website, string twitter, string addressStreet1, string addressStreet2, string postcode, string state, string country, Nullable<int> createdBy)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierDefaultMarkupParameter = supplierDefaultMarkup.HasValue ?
                new ObjectParameter("SupplierDefaultMarkup", supplierDefaultMarkup) :
                new ObjectParameter("SupplierDefaultMarkup", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var twitterParameter = twitter != null ?
                new ObjectParameter("Twitter", twitter) :
                new ObjectParameter("Twitter", typeof(string));
    
            var addressStreet1Parameter = addressStreet1 != null ?
                new ObjectParameter("AddressStreet1", addressStreet1) :
                new ObjectParameter("AddressStreet1", typeof(string));
    
            var addressStreet2Parameter = addressStreet2 != null ?
                new ObjectParameter("AddressStreet2", addressStreet2) :
                new ObjectParameter("AddressStreet2", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("Postcode", postcode) :
                new ObjectParameter("Postcode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertSupplier", supplierNameParameter, supplierDefaultMarkupParameter, descriptionParameter, firstnameParameter, lastnameParameter, companyParameter, emailParameter, phoneParameter, mobileParameter, faxParameter, websiteParameter, twitterParameter, addressStreet1Parameter, addressStreet2Parameter, postcodeParameter, stateParameter, countryParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_InsertTag(string tagName, Nullable<int> createdBy)
        {
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertTag", tagNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateBrand(Nullable<int> productBrandId, string brandName, string brandDescription, Nullable<int> updatedBy)
        {
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandDescriptionParameter = brandDescription != null ?
                new ObjectParameter("BrandDescription", brandDescription) :
                new ObjectParameter("BrandDescription", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateBrand", productBrandIdParameter, brandNameParameter, brandDescriptionParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateProductType(Nullable<int> productTypeId, string productTypeName, Nullable<int> updatedBy)
        {
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productTypeNameParameter = productTypeName != null ?
                new ObjectParameter("ProductTypeName", productTypeName) :
                new ObjectParameter("ProductTypeName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateProductType", productTypeIdParameter, productTypeNameParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateSupplier(Nullable<int> productSupplierId, string supplierName, Nullable<decimal> supplierDefaultMarkup, string description, string firstname, string lastname, string company, string email, string phone, string mobile, string fax, string website, string twitter, string addressStreet1, string addressStreet2, string postcode, string state, string country, Nullable<int> updatedBy)
        {
            var productSupplierIdParameter = productSupplierId.HasValue ?
                new ObjectParameter("ProductSupplierId", productSupplierId) :
                new ObjectParameter("ProductSupplierId", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierDefaultMarkupParameter = supplierDefaultMarkup.HasValue ?
                new ObjectParameter("SupplierDefaultMarkup", supplierDefaultMarkup) :
                new ObjectParameter("SupplierDefaultMarkup", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var twitterParameter = twitter != null ?
                new ObjectParameter("Twitter", twitter) :
                new ObjectParameter("Twitter", typeof(string));
    
            var addressStreet1Parameter = addressStreet1 != null ?
                new ObjectParameter("AddressStreet1", addressStreet1) :
                new ObjectParameter("AddressStreet1", typeof(string));
    
            var addressStreet2Parameter = addressStreet2 != null ?
                new ObjectParameter("AddressStreet2", addressStreet2) :
                new ObjectParameter("AddressStreet2", typeof(string));
    
            var postcodeParameter = postcode != null ?
                new ObjectParameter("Postcode", postcode) :
                new ObjectParameter("Postcode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateSupplier", productSupplierIdParameter, supplierNameParameter, supplierDefaultMarkupParameter, descriptionParameter, firstnameParameter, lastnameParameter, companyParameter, emailParameter, phoneParameter, mobileParameter, faxParameter, websiteParameter, twitterParameter, addressStreet1Parameter, addressStreet2Parameter, postcodeParameter, stateParameter, countryParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UpdateTag(Nullable<int> productTagId, string tagName, Nullable<int> updatedBy)
        {
            var productTagIdParameter = productTagId.HasValue ?
                new ObjectParameter("ProductTagId", productTagId) :
                new ObjectParameter("ProductTagId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UpdateTag", productTagIdParameter, tagNameParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_InsertProduct(string productName, string productHandle, Nullable<bool> isProductCanBeSold, string description, Nullable<int> productTypeId, Nullable<int> productBrandId, Nullable<int> supplierId, string supplierCode, string salesAccountCode, string purchaseAccountCode, Nullable<int> createdBy)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productHandleParameter = productHandle != null ?
                new ObjectParameter("ProductHandle", productHandle) :
                new ObjectParameter("ProductHandle", typeof(string));
    
            var isProductCanBeSoldParameter = isProductCanBeSold.HasValue ?
                new ObjectParameter("IsProductCanBeSold", isProductCanBeSold) :
                new ObjectParameter("IsProductCanBeSold", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var productTypeIdParameter = productTypeId.HasValue ?
                new ObjectParameter("ProductTypeId", productTypeId) :
                new ObjectParameter("ProductTypeId", typeof(int));
    
            var productBrandIdParameter = productBrandId.HasValue ?
                new ObjectParameter("ProductBrandId", productBrandId) :
                new ObjectParameter("ProductBrandId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var salesAccountCodeParameter = salesAccountCode != null ?
                new ObjectParameter("SalesAccountCode", salesAccountCode) :
                new ObjectParameter("SalesAccountCode", typeof(string));
    
            var purchaseAccountCodeParameter = purchaseAccountCode != null ?
                new ObjectParameter("PurchaseAccountCode", purchaseAccountCode) :
                new ObjectParameter("PurchaseAccountCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_InsertProduct", productNameParameter, productHandleParameter, isProductCanBeSoldParameter, descriptionParameter, productTypeIdParameter, productBrandIdParameter, supplierIdParameter, supplierCodeParameter, salesAccountCodeParameter, purchaseAccountCodeParameter, createdByParameter);
        }
    
        public virtual int usp_InsertProductOutletPricing(string productOutletPricingsList)
        {
            var productOutletPricingsListParameter = productOutletPricingsList != null ?
                new ObjectParameter("ProductOutletPricingsList", productOutletPricingsList) :
                new ObjectParameter("ProductOutletPricingsList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProductOutletPricing", productOutletPricingsListParameter);
        }
    
        public virtual int usp_InsertProductPricing(string productPricingsList)
        {
            var productPricingsListParameter = productPricingsList != null ?
                new ObjectParameter("ProductPricingsList", productPricingsList) :
                new ObjectParameter("ProductPricingsList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProductPricing", productPricingsListParameter);
        }
    
        public virtual int usp_InsertProductTag(string tagsList)
        {
            var tagsListParameter = tagsList != null ?
                new ObjectParameter("TagsList", tagsList) :
                new ObjectParameter("TagsList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProductTag", tagsListParameter);
        }
    }
}
